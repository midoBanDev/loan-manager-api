name: PR Pipeline
# PR 검증 워크플로우

on:
 pull_request:
   branches: 
     - main

jobs:
  pull_request_build_test:
    runs-on: ubuntu-latest  
    steps:
    - 
      name: Checkout Repository
      uses: actions/checkout@v4  
      # 현재 리포지토리를 체크아웃합니다.

    - 
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  
      # Docker Buildx를 설정합니다.

    - 
      name: Build and Push
      uses: docker/build-push-action@v2
      with:
        # 빌드 컨텍스트 : Dockerfile이 있는 위치
        context: .
        # Dockerfile의 경로
        file: Dockerfile
        build-args: |
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        # 이미지 푸시 여부
        push: false  
        # 플랫폼 지정
        platforms: linux/amd64,linux/arm64,linux/arm/v7
    
    -
      name: Notify Failure
      if: failure()
      run: echo "Docker build failed."

---     

# 빌드 & 푸시 워크플로우      
name: Backend Build and Push

on:
  push:
    branches: [ "main" ]  # main 브랜치에 push될 때
      
jobs:
  build-and-push:
    runs-on: ubuntu-latest  
    # 가장 최신의 Ubuntu 러너를 사용합니다.

    steps:
    - 
      name: Checkout Repository
      uses: actions/checkout@v4  
      # 현재 리포지토리를 체크아웃합니다.

    - 
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  
      # Docker Buildx를 설정합니다.

    - 
      name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}  
        # GitHub Secret에서 Docker Hub 사용자 이름을 가져옵니다.
        password: ${{ secrets.DOCKERHUB_TOKEN }}     
        # GitHub Secret에서 Docker Hub 액세스 토큰을 가져옵니다.

    - 
      name: Build and Push
      uses: docker/build-push-action@v2
      with:
        # 빌드 컨텍스트 : Dockerfile이 있는 위치
        context: .
        # Dockerfile의 경로
        file: Dockerfile
        build-args: |
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        push: true  # 이미지를 레지스트리에 푸시합니다.
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/loan-manager-api:${{ github.sha }}  

