plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'    //  Asciidoctor 플러그인 적용
}

group = 'com.gt'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// 컴파일 시 옵션 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExtensions
}

// 레포지토리 설정: 의존성을 가져올 저장소 설정
repositories {
	mavenCentral()  // Maven 중앙 저장소 사용
}

dependencies {
	// spring boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	// database
	implementation 'org.postgresql:postgresql:42.7.1'
	
	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// google
	implementation 'com.google.api-client:google-api-client:2.7.0'

	// test lombok
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	
	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	// Spring REST Docs 의존성
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'    // MockMvc 사용
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'      // Asciidoctor 확장


	// H2 database for testing
	testRuntimeOnly 'com.h2database:h2'
}

// ext: Gradle의 확장 속성 정의
ext {
    set('snippetsDir', file("build/generated-snippets"))    // snippetsDir 전역 변수 선언: REST Docs 스니펫이 생성될 디렉토리 지정
}

// REST Docs 테스트
tasks.named('test').configure {
    doFirst {
        println "test task 시작"
    }
    outputs.dir snippetsDir
    useJUnitPlatform()

    testLogging {
        // 표준 출력 로그만 보기
        showStandardStreams = true
        
        // 실패한 테스트에 대해서만 상세 정보 표시
        events "failed"
        exceptionFormat = 'full'
    }
}

tasks.named('asciidoctor').configure {
    doFirst {
        println "asciidoctor task 시작"
    }
    inputs.dir snippetsDir
    configurations 'asciidoctorExtensions'
    dependsOn test
    
    sources {
        include "**/*.adoc"
    }
    
    attributes = [
        'snippets': snippetsDir,
        'source-highlighter': 'highlight.js',
        'toc': 'left',
        'toclevels': '3',
        'sectlinks': 'true'
    ]
}


// static/docs 폴더 비우기
asciidoctor.doFirst {
    println "asciidoctor.doFirst 시작"
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
tasks.register('copyDocument', Copy) {
    doFirst {
        println "copyDocument task 시작"
    }
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}


tasks.named('bootJar').configure {
    doFirst {
        println "bootJar task 시작"
    }
    dependsOn copyDocument
    copy {
        from "${asciidoctor.outputDir}"
        into 'build/resources/main/static/docs'
    }
}

// clean 명령어 사용 시에만 static/docs 폴더 삭제. 
// build 태스크와는 독립적으로 실행, ./gradlew clean 명령어 사용 시에만 실행
tasks.named('clean').configure {
    doFirst {
        println "clean task 시작"
    }
    delete file('src/main/resources/static/docs')
}


/*
./gradlew build 실행 시:

1. build 태스크 시작
   └── bootJar (build의 의존성)
        └── copyDocument (bootJar의 의존성)
             └── asciidoctor (copyDocument의 의존성)
*/