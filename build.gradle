plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'    //  Asciidoctor 플러그인 적용
}

group = 'com.gt'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// 컴파일 시 옵션 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExtensions
}

// 레포지토리 설정: 의존성을 가져올 저장소 설정
repositories {
	mavenCentral()  // Maven 중앙 저장소 사용
}

// implementation: 컴파일 타임과 런타임 모두에서 사용 가능
// runtimeOnly: 런타임에만 사용 가능
dependencies {
	// spring boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

    // 정적 파일 자동 업데이트
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // build test
    runtimeOnly 'com.h2database:h2'

	// database
	implementation 'org.postgresql:postgresql:42.7.1'
	
	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// google
	implementation 'com.google.api-client:google-api-client:2.7.0'

	// test lombok
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	
	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	// Spring REST Docs 의존성
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'    // MockMvc 사용
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'      // Asciidoctor 확장


	// H2 database for testing
	testRuntimeOnly 'com.h2database:h2'
}

// ext: Gradle의 확장 속성 정의
ext {
    set('snippetsDir', file("build/generated-snippets"))    // snippetsDir 전역 변수 선언: REST Docs 스니펫이 생성될 디렉토리 지정
}

// REST Docs 테스트
tasks.named('test').configure {

    systemProperty 'spring.profiles.active', 'test'

    doFirst {
        println "test task 시작"
    }
    outputs.dir snippetsDir // 테스트 실행 후 스패닛 문서들이 생성될 위치 지정

    useJUnitPlatform {
        includeTags 'restdocs'  // @Tag(restdocs) 태그가 있는 테스트만 실행
        excludeTags 'integration'  // @Tag(integration) 태그가 있는 테스트는 제외
    }

    testLogging {
        // 표준 출력 로그만 보기
        showStandardStreams = true
        
        // 실패한 테스트에 대해서만 상세 정보 표시
        events "failed"
        exceptionFormat = 'full'
    }
}

tasks.named('asciidoctor').configure {

    doFirst {
        delete file('src/main/resources/static/docs')
        println "asciidoctor task 시작"
    }

    inputs.dir snippetsDir  // asciidoctor는 해당 경로에 있는 스패닛 문서들을 가지고 최종 결과 HTML 문서를 생선한다.
    configurations 'asciidoctorExtensions'  // asciidoctorExtensions 설정을 사용하여 확장 기능을 활성화
    dependsOn test  // test 태스크가 먼저 실행되도록 의존성 설정
    
    // AsciiDoc 문서들을 찾을 때 어떤 파일을 찾을 패턴을 지정하는 설정.
    sources {
        include "**/index.adoc"
    }

    // asciidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
    doLast {
        copy {
            from file("build/docs/asciidoc")    // 해당 경로는 asciidoctor가 실행 후 작업 결과물을 저장하는 기본 위치이다. 
            into file("src/main/resources/static/docs") // 애플리케이션 실행 시 접근할 수 있도록 정적 파일 저장 위치
        }
        println "asciidoctor task 완료"
    }
}


tasks.named('bootJar').configure {
    doFirst {
        println "bootJar task 시작"
    }
    dependsOn asciidoctor // asciidoctor 태스크가 먼저 실행되도록 의존성 설정
    copy {
        from "${asciidoctor.outputDir}" // asciidoctor 작업 결과물을 저장하는 기본 위치를 불러온다. (build/docs/asciidoc)
        into 'build/resources/main/static/docs' // 빌드 시 jar 파일에 포함시키기 위해 해당 경로에 복사한다.
    }
}

// clean 명령어 사용 시에만 static/docs 폴더 삭제. 
// build 태스크와는 독립적으로 실행, ./gradlew clean 명령어 사용 시에만 실행
tasks.named('clean').configure {
    doFirst {
        println "clean task 시작"
    }
    delete file('src/main/resources/static/docs')
}

tasks.register('quickDocs', org.asciidoctor.gradle.jvm.AsciidoctorTask) {

    doFirst {
        println "QuickDocs task 실행 시작"
        // println "snippetsDir 위치: ${snippetsDir}"
        // println "index.adoc 위치: ${project.file('src/docs/asciidoc')}"
        
        delete file('src/main/resources/static/docs')
    }

    setSourceDir(file('src/docs/asciidoc'))
    setOutputDir(file('build/docs/asciidoc'))

    inputs.dir snippetsDir

    configurations 'asciidoctorExtensions'

     // 항상 실행되도록 설정
    outputs.upToDateWhen { false }   

    doLast {
        println "문서 생성 완료"
        println "생성된 문서 위치: ${outputDir}"
        
        copy {
            from file("build/docs/asciidoc")
            into file("src/main/resources/static/docs")
        }
        println "문서 복사 완료"
    }
}
/*
./gradlew build 실행 시:

1. build 태스크 시작
   └── bootJar (build의 의존성)
        └── asciidoctor (bootJar의 의존성)
*/